#!/usr/bin/env python3
from http.server import HTTPServer, BaseHTTPRequestHandler

import requests
import requests_cache
import datetime
import re
import json
import dateutil.parser as dateutil_parser
from dateutil.tz import gettz
from urllib import parse as urlparse

from rss2producer import RSS2Feed

requests_cache.install_cache('ksl_cache', expire_after=datetime.timedelta(minutes=20))


items_per_page = 96
user_agent = "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0"
item_url = "https://classifieds.ksl.com/listing/"
stock_img = '//classifieds.ksl.com/images/responsive/noimage-bike-400x300.png'


def create_rss(url: str, title: str) -> str:

    r = requests.get(url, headers={"Host": "classifieds.ksl.com", "User-Agent": user_agent})

    listings = scrap_listings(r)

    rss_feed = RSS2Feed(
        title=title,
        link='',
        description='A longer description of the feed contents.'
    )

    for list_item in listings:
        rss_feed.append_item(title=build_title(list_item['title'], list_item.get('price', '')),
                             link=item_url+str(list_item['id']),
                             description=build_description(list_item['description'], list_item.get('photo', '')),
                             pub_date=convert_time(list_item['createTime'])
                             )

    return rss_feed.get_xml()


def build_title(title, price):
    price = str(price)
    if price.strip():
        price = " -- $"+price

    return "{}{}".format(title, price)


def build_description(descr, image):
    if not image.strip():
        image = stock_img
    return """{}<img src="https:{}"/>""".format(descr, image)


def convert_time(timestamp: str):
    return dateutil_parser.parse(timestamp).astimezone(tz=gettz("MT"))


def scrap_listings(r):
    listings = re.search("listings:\s*(\[.*\]),", r.text)
    listings = json.loads(listings.group(1))
    return listings


class KslRssHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        url_data = urlparse.urlparse(self.path)
        q_args = urlparse.parse_qs(url_data.query)

        rss = create_rss(q_args['_ksl_link'][0], q_args['_rtitle'][0])


        # Send response status code
        self.send_response(200)

        # Send headers
        self.send_header('Content-type', 'application/rss+xml')
        self.end_headers()

        # Write content as utf-8 data
        self.wfile.write(bytes(rss, "utf8"))
        return

def run(server_class=HTTPServer, handler_class=KslRssHandler):
    server_address = ('', 36649)
    httpd = server_class(server_address, handler_class)
    httpd.serve_forever()

if __name__ == "__main__":
    run()
    # print(create_rss(""))